use "./compiler/ast.ae"
use "./lib/map.ae"

struct TypeChecker {
    scopes: &Vector   // &Vector<&Map<string, &Variable>>
    functions: &Map   // &Map<string, &Function>
    structures: &Map  // &Map<string, &Structure>
    methods: &Map     // &Map<string, &Map<string, &Function>>
    cur_func: &Function
}

def TypeChecker::new(): &TypeChecker {
    let checker = calloc(1, sizeof(TypeChecker)) as &TypeChecker
    checker.scopes = Vector::new()
    checker.functions = Map::new()
    checker.structures = Map::new()
    checker.methods = Map::new()
    return checker
}

def TypeChecker::push_scope(&this) {
    let scope = Map::new()
    .scopes.push(scope as untyped_ptr)
}

def TypeChecker::scope(&this): &Map {
    return .scopes.back() as &Map
}

def TypeChecker::pop_scope(&this) {
    let scope = .scopes.pop() as &Map
    scope.free()
}

def TypeChecker::push_var(&this, var: &Variable) {
    let scope = .scope()
    if scope.exists(var.name) {
        error_span(var.span, "Variable is already defined in scope")
    }
    .scope().insert(var.name, var as untyped_ptr)
}

def TypeChecker::find_var(&this, name: string): &Variable {
    for let i = .scopes.size - 1; i >= 0; i -= 1 {
        let scope = .scopes.at(i) as &Map
        let var = scope.get(name) as &Variable
        if var != 0 as &Variable {
            return var
        }
    }
    return 0 as &Variable
}

def TypeChecker::get_struct_member(&this, lhs: string, rhs: string): &Variable {
    let struc = .structures.get(lhs) as &Structure
    for let i = 0; i < struc.fields.size; i += 1 {
        let field = struc.fields.at(i) as &Variable
        if streq(field.name, rhs) {
            return field
        }
    }
    return 0 as &Variable
}

def TypeChecker::type_is_valid(&this, type: &Type): bool {
    if type.base == BaseType::Pointer {
        return .type_is_valid(type.ptr)
    } else if type.base == BaseType::Function {
        for let i = 0; i < type.params.size; i += 1 {
            if not .type_is_valid(type.params.at(i) as &Type) {
                return false
            }
        }
        return .type_is_valid(type.return_type)
    } else if type.base == BaseType::Structure {
        let struc = .structures.get(type.name) as &Structure
        if struc != 0 as &Structure {
            // Fill in the struct_def for unvalidated stucts
            type.struct_def = struc
            return true
        }
        return false
    } else {
        return true
    }
}

def TypeChecker::check_method_call(&this, method_type: &Type, node: &AST) {
    let callee = node.u.call.callee
    if (callee.type != ASTType::Member and callee.type != ASTType::ScopeLookup) {
        error_span(callee.span,
                "Method call is not to a member, internal compiler error")
    }

    let s_methods = .methods.get(method_type.name) as &Map
    let method = s_methods.get(callee.u.member.name) as &Function
    node.u.call.func = method

    // Due to the way we handle typechecking, we might run this function twice
    // on the same node. This is fine, but we need to make sure we don't double
    // add the method argument twice implicitly.
    if not node.u.call.added_method_arg {
        node.u.call.added_method_arg = true;
        if callee.type == ASTType::Member {
            if method.params.size == 0 {
                // This should ideally never happen.
                error_span(callee.span,
                            "Instance method should have `this` argument, internal error");
            }
            let method_param = (method.params.at(0) as &Variable).type

            let member = callee.u.member
            let first_arg = member.lhs
            if member.is_pointer and method_param.base != BaseType::Pointer {
                first_arg = AST::new_unop(ASTType::Dereference, first_arg.span, first_arg)
            } else if not member.is_pointer and method_param.base == BaseType::Pointer {
                first_arg = AST::new_unop(ASTType::Address, first_arg.span, first_arg)
            }
            node.u.call.args.push_front(first_arg as untyped_ptr)
        }
    }
}

def TypeChecker::check_call(&this, node: &AST): &Type {
    // This is a hack to avoid typechecking of `print` and `println`
    let callee = node.u.call.callee;
    if (callee.type == ASTType::Identifier) {
        callee.u.ident.is_function = false;
        let name = callee.u.ident.name;
        if streq(name, "print") or streq(name, "println") {
            for let i = 0; i < node.u.call.args.size; i += 1 {
                let arg = node.u.call.args.at(i) as &AST
                .check_expression(arg)
            }
            return Type::new(BaseType::Void, node.span)
        }
    }

    let func_type = .check_expression(callee);
    node.u.call.func = func_type.func_def;
    if func_type.base != BaseType::Function and func_type.base != BaseType::Method {
        error_span(callee.span, "Cannot call a non-function type")
    }

    if func_type.base == BaseType::Method {
        .check_method_call(func_type, node)
    }

    let params = func_type.params
    if (params.size != node.u.call.args.size) {
        error_span(node.span, "Number of arguments does not match function signature");
    }
    for let i = 0; i < params.size; i += 1 {
        let param = params.at(i) as &Type
        let arg = node.u.call.args.at(i) as &AST
        let arg_type = .check_expression(arg)
        if not param.eq(arg_type) {
            error_span(arg.span, "Argument type does not match function parameter type");
        }
    }

    return func_type.return_type;
}

def TypeChecker::check_format_string(&this, node: &AST): &Type {
    // FIXME: Refactor this with string builder, this is inefficient
    let parts = node.u.fmt_str.parts;
    let exprs = node.u.fmt_str.exprs;

    if parts.size != exprs.size + 1 {
        error_span(node.span, "Number of format string parts does not match number of expressions")
    }

    let size = 0
    for let i = 0; i < node.u.fmt_str.parts.size; i += 1 {
        size += strlen(node.u.fmt_str.parts.at(i) as string) + 3
    }

    let buf = calloc(size + 1, 1) as string
    for let i = 0; i < exprs.size; i += 1 {
        let part = parts.at(i) as string
        let expr = exprs.at(i) as &AST

        strcat(buf, part)
        let expr_type = .check_expression(expr)
        if expr_type.base == BaseType::I32 or expr_type.base == BaseType::U8 {
            strcat(buf, "%d")
        } else if expr_type.base == BaseType::Bool {
            strcat(buf, "%s")
        } else if expr_type.base == BaseType::F32 {
            strcat(buf, "%f")
        } else if expr_type.base == BaseType::Char {
            strcat(buf, "%c")
        } else if expr_type.base == BaseType::Pointer and expr_type.ptr.base == BaseType::Char {
            strcat(buf, "%s")
        } else if expr_type.base == BaseType::Pointer {
            strcat(buf, "%p")
        } else {
            strcat(buf, "%s")
        }
    }
    strcat(buf, parts.back() as string)
    node.u.fmt_str.str = buf
    return Type::ptr_to(BaseType::Char, node.span)
}

def TypeChecker::check_pointer_arith(&this, node: &AST, lhs: &Type, rhs: &Type): &Type {
    if node.type == ASTType::Plus or node.type == ASTType::Minus {
        if lhs.base == BaseType::Pointer and rhs.base == BaseType::I32 {
            return lhs
        }
        if lhs.base == BaseType::I32 and rhs.base == BaseType::Pointer {
            return rhs
        }
        if lhs.eq(rhs) and lhs.base == BaseType::Pointer {
            if node.type == ASTType::Minus {
                return Type::new(BaseType::I32, node.span)
            }
        }
    }
    error_span(node.span, "Invalid pointer arithmetic")
    return 0 as &Type
}

def TypeChecker::check_expression(&this, node: &AST): &Type {
    let etype = 0 as &Type
    if node.type == ASTType::Call {
        etype = .check_call(node)
    } else if node.type == ASTType::IntLiteral {
        etype = Type::new(BaseType::I32, node.span)
    } else if node.type == ASTType::FloatLiteral {
        etype = Type::new(BaseType::F32, node.span)
    } else if node.type == ASTType::BoolLiteral {
        etype = Type::new(BaseType::Bool, node.span)
    } else if node.type == ASTType::StringLiteral {
        etype = Type::ptr_to(BaseType::Char, node.span)
    } else if node.type == ASTType::CharLiteral {
        etype = Type::new(BaseType::Char, node.span)
    } else if node.type == ASTType::FormatStringLiteral {
        etype = .check_format_string(node)
    } else if node.type == ASTType::SizeOf {
        if not .type_is_valid(node.u.size_of_type) {
            error_span(node.u.size_of_type.span, "Invalid type")
        }
        etype = Type::new(BaseType::I32, node.span)

    } else if node.type == ASTType::Identifier {
        let ident = &node.u.ident;
        let var = .find_var(ident.name)
        let func = .functions.get(ident.name) as &Function

        if ident.is_function {
            etype = ident.func.type
        } else if var != 0 as &Variable {
            ident.is_function = false
            ident.var = var
            etype = var.type
        } else if func != 0 as &Function {
            ident.is_function = true
            ident.func = func
            etype = func.type
        } else {
            error_span(node.span, "Unknown Identifier")
        }

    } else if node.type == ASTType::Plus or
            node.type == ASTType::Minus or
            node.type == ASTType::Multiply or
            node.type == ASTType::Divide {

        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if lhs.base == BaseType::Pointer or rhs.base == BaseType::Pointer {
            etype = .check_pointer_arith(node, lhs, rhs)
        } else if not lhs.is_numeric() or not rhs.is_numeric() {
            error_span(node.span, "Operator requires numeric types")
        } else if not lhs.eq(rhs) {
            error_span(node.span, "Operands must be be of the same type")
        } else {
            etype = lhs
        }
    }  else if node.type == ASTType::LessThan or
            node.type == ASTType::LessThanEquals or
            node.type == ASTType::GreaterThan or
            node.type == ASTType::GreaterThanEquals {

        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if not lhs.is_numeric() or not rhs.is_numeric() {
            error_span(node.span, "Operator requires numeric types")
        }
        if not lhs.eq(rhs) {
            error_span(node.span, "Operands must be be of the same type")
        }
        etype = Type::new(BaseType::Bool, node.span)

    } else if node.type == ASTType::Equals or
            node.type == ASTType::NotEquals {

        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if not lhs.eq(rhs) {
            error_span(node.span, "Operands must be be of the same type")
        }
        if lhs.base == BaseType::Structure {
            let struc = .structures.get(lhs.name) as &Structure
            if not struc.is_enum {
                error_span(node.span, "Cannot compare structs directly")
            }
        }
        etype = Type::new(BaseType::Bool, node.span)

    } else if node.type == ASTType::And or
            node.type == ASTType::Or {

        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if not lhs.eq(rhs) or lhs.base != BaseType::Bool {
            error_span(node.span, "Operands must be boolean")
        }
        etype = Type::new(BaseType::Bool, node.span)

    } else if node.type == ASTType::Not {
        let rhs = .check_expression(node.u.unary)
        if rhs.base != BaseType::Bool {
            error_span(node.u.unary.span, "Expression must be boolean")
        }
        etype = Type::new(BaseType::Bool, node.span)

    } else if node.type == ASTType::Modulus or
            node.type == ASTType::BitwiseOr or
            node.type == ASTType::BitwiseAnd or
            node.type == ASTType::BitwiseXor {

        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if lhs.base != BaseType::I32 or rhs.base != BaseType::I32 {
            error_span(node.span, "Operator requires integer types")
        }
        etype = lhs

    } else if node.type == ASTType::UnaryMinus {

        etype = .check_expression(node.u.unary)
        if not etype.is_numeric() {
            error_span(node.u.unary.span, "Expression must be a number")
        }

    } else if node.type == ASTType::Address {

        etype = .check_expression(node.u.unary)
        etype = Type::new_link(BaseType::Pointer, etype, node.span)

    } else if node.type == ASTType::Dereference {
        let expr_type = .check_expression(node.u.unary)
        if expr_type.base != BaseType::Pointer {
            error_span(node.u.unary.span, "Expression must be a pointer-type")
        }
        etype = expr_type.ptr

    } else if node.type == ASTType::Index {

        let expr_type = .check_expression(node.u.binary.lhs)
        if expr_type.base != BaseType::Pointer {
            error_span(node.u.binary.lhs.span, "Expression must be a pointer-type")
        }
        let index_type = .check_expression(node.u.binary.rhs)
        if index_type.base != BaseType::I32 {
            error_span(node.u.binary.rhs.span, "Index must be an integer")
        }
        etype = expr_type.ptr

    } else if node.type == ASTType::PlusEquals or
            node.type == ASTType::MinusEquals or
            node.type == ASTType::DivideEquals or
            node.type == ASTType::MultiplyEquals {

        // TODO: Only allow assignments to l-values, reject literals
        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if not lhs.is_numeric() or not rhs.is_numeric() {
            error_span(node.u.binary.lhs.span, "Operator requires numeric types")
        }
        if not lhs.eq(rhs) {
            error_span(node.span, "Operands must be be of the same type")
        }
        etype = lhs

    } else if node.type == ASTType::Assignment {
        // TODO: Only allow assignments to l-values, reject literals;
        let lhs = .check_expression(node.u.binary.lhs)
        let rhs = .check_expression(node.u.binary.rhs)
        if not lhs.eq(rhs) {
            error_span(node.span, "Variable type does not match assignment type")
        }
        etype = lhs

    } else if node.type == ASTType::ScopeLookup {
        if node.u.member.lhs.type != ASTType::Identifier {
            error_span(node.u.member.lhs.span,
                "Left hand side of `::` must be a struct name")
        }
        let struct_name = node.u.member.lhs.u.ident.name
        let struc = .structures.get(struct_name) as &Structure
        if struc == 0 as &Structure {
            error_span(node.u.member.lhs.span, "Unknown struct with this name")
        }

        let field_name = node.u.member.name
        let var = .get_struct_member(struct_name, field_name)

        let s_methods = .methods.get(struct_name) as &Map
        let method = s_methods.get(field_name) as &Function
        if struc.is_enum and var != 0 as &Variable {
            // FIXME: This is a hack, we're modifying the AST Node type
            // This is an enum value
            node.type                = ASTType::EnumValue;
            node.u.enum_val.struct_def = struc;
            node.u.enum_val.name     = field_name;
            etype = struc.type
        } else if method != 0 as &Function {
            etype = method.type
        } else {
            error_span(node.span, "Struct has no static method with this name")
        }

    } else if node.type == ASTType::Member {
        let lhs_type = .check_expression(node.u.member.lhs)
        if not lhs_type.is_struct_or_ptr() {
            error_span(node.u.member.lhs.span,
                       "LHS of member access must be a (pointer to) struct")
        }
        node.u.member.is_pointer = (lhs_type.base == BaseType::Pointer)
        let struct_type = lhs_type
        if (lhs_type.base == BaseType::Pointer) {
            struct_type = lhs_type.ptr
        }

        let struct_name = struct_type.name
        let field_name = node.u.member.name

        let struc = .structures.get(struct_name) as &Structure
        let field = .get_struct_member(struct_name, field_name)

        let s_methods = .methods.get(struct_name) as &Map
        let method = s_methods.get(field_name) as &Function

        if not struc.is_enum and field != 0 as &Variable {
            etype = field.type;
        } else if method != 0 as &Function {
            if method.is_static {
                error_span(node.span, "Member access requires a non-static method")
            }
            etype = method.type
        } else {
            if struc.is_enum {
                error_span(node.span, "Enum has no method with this name")
            } else {
                error_span(node.span, "Struct has no member with this name")
            }
        }

    } else if node.type == ASTType::Cast {
        let lhs_type = .check_expression(node.u.cast.lhs)
        if not .type_is_valid(node.u.cast.to) {
            error_span(node.u.cast.to.span, "Type does not exist");
        }
        etype = node.u.cast.to

    } else {
        println("Unhandled type in check_expression: %s", node.type.str())
        exit(1)
    }
    node.etype = etype
    return etype
}

def TypeChecker::check_statement(&this, node: &AST) {
    if node.type == ASTType::Block {
        .check_block(node)

    } else if node.type == ASTType::Return {
        if .cur_func == 0 as &Function {
            error_span(node.span, "Return statement outside of function")
        }
        if .cur_func.return_type.base == BaseType::Void {
            error_span(node.span, "Cannot return from void function")
        }
        let ret_type = .check_expression(node.u.unary)
        if not ret_type.eq(.cur_func.return_type) {
            error_span(node.span, "Return type does not match function return type")
        }

    } else if node.type == ASTType::Defer {
        .check_expression(node.u.unary)

    } else if node.type == ASTType::VarDeclaration {
        let var_decl = &node.u.var_decl
        if var_decl.init  != 0 as &AST {
            let init_type = .check_expression(var_decl.init)
            if init_type.base == BaseType::Method {
                error_span(var_decl.init.span, "Cannot assign methods to variables")
            }
            if var_decl.var.type == 0 as &Type {
                var_decl.var.type = init_type
            } else if not var_decl.var.type.eq(init_type) {
                error_span(var_decl.init.span, "Variable type does not match initializer type")
            }
        } else {
            if var_decl.var.type == 0 as &Type {
                error_span(var_decl.var.span, "Variable type cannot be inferred, specify explicitly");
            }
            if not .type_is_valid(var_decl.var.type) {
                error_span(var_decl.var.type.span, "Invalid variable type");
            }
        }
        .push_var(var_decl.var)

    } else if node.type == ASTType::While {
        let cond_type = .check_expression(node.u.loop.cond)
        if cond_type.base != BaseType::Bool {
            error_span(node.u.loop.cond.span, "Condition must be boolean")
        }
        .check_statement(node.u.loop.body)

    } else if node.type == ASTType::For {
        .push_scope()
        if node.u.loop.init != 0 as &AST {
            .check_statement(node.u.loop.init)
        }
        if node.u.loop.init != 0 as &AST {
            let cond_type = .check_expression(node.u.loop.cond)
            if cond_type.base != BaseType::Bool {
                error_span(node.u.loop.cond.span, "Condition must be boolean")
            }
        }
        if node.u.loop.incr != 0 as &AST {
            .check_statement(node.u.loop.incr)
        }
        .check_statement(node.u.loop.body)
        .pop_scope()

    } else if node.type == ASTType::If {
        let cond_type = .check_expression(node.u.if_stmt.cond)
        if cond_type.base != BaseType::Bool {
            error_span(node.u.if_stmt.cond.span, "Condition must be boolean")
        }
        .check_statement(node.u.if_stmt.then)
        if node.u.if_stmt.els != 0 as &AST {
            .check_statement(node.u.if_stmt.els)
        }

    } else {
        .check_expression(node)
    }
}

def TypeChecker::check_block(&this, node: &AST) {
    .push_scope();
    let statements = node.u.block.statements;
    for let i = 0; i < statements.size; i += 1 {
        .check_statement(statements.at(i) as &AST);
    }
    .pop_scope();
}

def TypeChecker::check_function(&this, func: &Function) {
    let prev_func = .cur_func
    .cur_func = func
    .push_scope();

    // The types of parameters and return are checked in decl-pass
    for let i = 0; i < func.params.size; i += 1 {
        let var = func.params.at(i) as &Variable
        .push_var(var)
    }

    if func.body != 0 as &AST { .check_block(func.body); }

    .pop_scope()
    .cur_func = prev_func
}

def TypeChecker::check_all_functions(&this, program: &Program) {
    for let i = 0; i < program.functions.size; i += 1 {
        let func = program.functions.at(i) as &Function
        let name        = func.name;
        let struct_name = func.method_struct_name
        let func_type = 0 as &Type

        if func.is_method {
            if not .structures.exists(struct_name) {
                error_span(func.span, "Type for method does not exist")
            }
            let s_methods = .methods.get(struct_name) as &Map
            if s_methods.exists(name) {
                error_span(func.span, "Method is already defined for this type")
            }
            let var = .get_struct_member(struct_name, name)
            if var != 0 as &Variable {
                error_span(func.span, "Type already has a field with this name")
            }

            func_type = Type::new(BaseType::Method, func.span)
            func_type.name = struct_name
        } else {
            func_type = Type::new(BaseType::Function, func.span)

            if .functions.exists(name) {
                error_span(func.span, "Function is already defined")
            }
        }
        func_type.func_def = func;

        func_type.params = Vector::new()
        for let j = 0; j < func.params.size; j += 1 {
            let param = func.params.at(j) as &Variable
            if not .type_is_valid(param.type) {
                error_span(param.type.span, "Invalid parameter type")
            }
            func_type.params.push(param.type as untyped_ptr);
        }
        if not .type_is_valid(func.return_type) {
            error_span(func.return_type.span, "Invalid return type")
        }
        func_type.return_type = func.return_type;
        func.type             = func_type;

        if func.is_method {
            let s_methods = .methods.get(struct_name) as &Map
            s_methods.insert(name, func as untyped_ptr)
        } else {
            .functions.insert(name, func as untyped_ptr)
        }
    }

    for let i = 0; i < program.functions.size; i += 1 {
        .check_function(program.functions.at(i) as &Function)
    }
}

def TypeChecker::dfs_structs(&this, struc: &Structure, results: &Vector, done: &Map) {
    done.insert(struc.name, struc as untyped_ptr)

    for let i = 0; i < struc.fields.size; i += 1 {
        let field = struc.fields.at(i) as &Variable
        if not .type_is_valid(field.type) {
            error_span(field.type.span, "Type of field is undefined");
        }

        // Don't need to ensure dependency order for externs
        if not struc.is_extern and field.type.base == BaseType::Structure {
            let neib_name = field.type.name
            let neib_struc = .structures.get(neib_name) as &Structure
            if not done.exists(neib_name) {
                .dfs_structs(neib_struc, results, done)
            }
        }
    }
    results.push(struc as untyped_ptr)
}

def TypeChecker::check_all_structs(&this, program: &Program) {
    for let i = 0; i < program.structures.size; i += 1 {
        let struc = program.structures.at(i) as &Structure
        let name = struc.name

        if .structures.exists(name) {
            error_span(struc.span, "Struct has already been defined")
        }

        .structures.insert(name, struc as untyped_ptr)
        .methods.insert(name, Map::new() as untyped_ptr)
    }

    // TODO: Check for loops in the dependency graph, and error
    let done = Map::new()        // Essentially hashset
    let results = Vector::new()  // Order for topological sort
    for let i = 0; i < program.structures.size; i += 1 {
        let struc = program.structures.at(i) as &Structure
        if not done.exists(struc.name) {
            .dfs_structs(struc, results, done)
        }
    }

    done.free()
    program.structures.free()
    program.structures = results
}

def TypeChecker::check_program(&this, program: &Program) {
    .check_all_structs(program);

    .push_scope();
    for let i = 0; i < program.global_vars.size; i += 1 {
        let var = program.global_vars.at(i) as &AST
        .check_statement(var)
    }

    .check_all_functions(program);
    .pop_scope();
}
