use "./compiler/ast.ae"
use "./compiler/utils.ae"

struct Parser {
    tokens: &Vector
    curr: i32
}

def Parser::make(tokens: &Vector): &Parser {
    let parser = calloc(1, sizeof(Parser)) as &Parser
    parser.tokens = tokens
    parser.curr = 0
    return parser
}

def Parser::error(&this, msg: string) {
    error_span(.token().span, msg)
}

def Parser::unhandled_type(&this, func: string) {
    .error(`Unexpected token in {func}: {.token().type.str()}`)
}

def Parser::token(&this): &Token {
    return .tokens.at(.curr) as &Token
}

def Parser::token_is(&this, type: TokenType): bool {
    return .token().type == type
}

def Parser::consume_if(&this, type: TokenType): bool {
    if .token_is(type) {
        .curr += 1
        return true
    }
    return false
}

def Parser::consume_newline_or(&this, type: TokenType) {
    if .token_is(type) {
        .curr += 1
    } else if not .token().seen_newline {
        .error(`Expected {type.str()} or newline`)
    }
}

def Parser::consume(&this, type: TokenType): &Token {
    if not .consume_if(type) {
        .error(`Expected TokenType::{type.str()}`)
    }
    return .tokens.at(.curr - 1) as &Token
}


def Parser::parse_type(&this): &Type {
    let type = 0 as &Type
    let start_span = .token().span

    let running = true
    while running {
        if .token_is(TokenType::Ampersand) {
            type = Type::new_link(BaseType::Pointer, type, .token().span)
            .curr += 1
        } else {
            running = false
        }
    }

    if .token_is(TokenType::I32) {
        type = Type::new_link(BaseType::I32, type, start_span.join(.token().span))
        .curr += 1
    } else if .token_is(TokenType::Bool) {
        type = Type::new_link(BaseType::Bool, type, start_span.join(.token().span))
        .curr += 1
    } else if .token_is(TokenType::Char) {
        type = Type::new_link(BaseType::Char, type, start_span.join(.token().span))
        .curr += 1
    } else if .token_is(TokenType::U8) {
        type = Type::new_link(BaseType::U8, type, start_span.join(.token().span))
        .curr += 1
    } else if .token_is(TokenType::F32) {
        type = Type::new_link(BaseType::F32, type, start_span.join(.token().span))
        .curr += 1
    } else if .token_is(TokenType::String) {
        let span = start_span.join(.token().span)
        type = Type::new_link(BaseType::Char,
                              Type::new_link(BaseType::Pointer, type, span),
                              span)
        .curr += 1
    } else if .token_is(TokenType::UntypedPtr) {
        let span = start_span.join(.token().span)
        type = Type::new_link(BaseType::Void,
                              Type::new_link(BaseType::Pointer, type, span),
                              span)
        .curr += 1
    } else if .token_is(TokenType::Identifier) {
        type = Type::new_link(BaseType::Structure, type, start_span.join(.token().span))
        type.name = .consume(TokenType::Identifier).text

    } else if .token_is(TokenType::Fn) {
        .consume(TokenType::Fn)
        .consume(TokenType::OpenParen)
        let params = Vector::new()
        while not .token_is(TokenType::CloseParen) {
            params.push(.parse_type() as untyped_ptr)
            if not .token_is(TokenType::CloseParen) {
                .consume(TokenType::Comma)
            }
        }
        .consume(TokenType::CloseParen)
        let return_type: &Type
        if .consume_if(TokenType::Colon) {
            return_type = .parse_type()
        } else {
            return_type = Type::new(BaseType::Void, .token().span)
        }
        type = Type::new_link(BaseType::Function, type, start_span.join(.token().span))
        type.params = params
        type.return_type = return_type

    } else {
        .unhandled_type("parse_type")
    }

    return type.reverse()
}

def Parser::parse_format_string(&this): &AST {
    let fstr = .consume(TokenType::FormatStringLiteral)
    let fstr_len = strlen(fstr.text)

    let expr_parts = Vector::new()    // Vector<string>
    let expr_start = Vector::new()    // Vector<i32>

    let format_parts = Vector::new()  // Vector<string>
    let count = 0
    let cur_start = 0
    for let i = 0; i < fstr_len; i += 1 {
        if fstr.text[i] == "{"[0] {
            if count == 0 {
                let part = substring(fstr.text, cur_start, i - cur_start)
                format_parts.push(part as untyped_ptr)
                cur_start = i + 1
            }
            count += 1
        } else if fstr.text[i] == "}"[0] {
            count -= 1
            if count == 0 {
                let part = substring(fstr.text, cur_start, i - cur_start)
                expr_parts.push(part as untyped_ptr)
                expr_start.push((fstr.text + cur_start) as untyped_ptr)
                cur_start = i + 1

            } else if count < 0 {
                error_span(fstr.span, "Unmatched '}' in format string")
            }
        }
    }
    if count != 0 {
        error_span(fstr.span, "Unmatched '{' in format string")
    }
    let part = substring(fstr.text, cur_start, fstr_len - cur_start)
    format_parts.push(part as untyped_ptr)

    let node = AST::new(ASTType::FormatStringLiteral, fstr.span)
    node.u.fmt_str.parts = format_parts

    let fstr_start = fstr.span.start
    let expr_nodes = Vector::new()
    for let i = 0; i < expr_parts.size; i += 1 {
        let part = expr_parts.at(i) as string
        let start = (expr_start.at(i) as string) - fstr.text

        let lexer = Lexer::make(part, fstr_start.filename)
        lexer.loc = fstr_start
        lexer.loc.col += start

        let tokens = lexer.lex()
        let parser = Parser::make(tokens)
        let expr = parser.parse_expression(false)

        expr_nodes.push(expr as untyped_ptr)
    }
    node.u.fmt_str.exprs = expr_nodes

    expr_parts.free()
    expr_start.free()
    return node
}

def Parser::parse_factor(&this, in_parens: bool): &AST {
    let node = 0 as &AST
    if .token_is(TokenType::IntLiteral) {
        node = AST::new(ASTType::IntLiteral, .token().span)
        let tok = .consume(TokenType::IntLiteral)
        node.u.num_literal = tok.text

    } else if .token_is(TokenType::FloatLiteral) {
        node = AST::new(ASTType::FloatLiteral, .token().span)
        let tok = .consume(TokenType::FloatLiteral)
        node.u.num_literal = tok.text

    } else if .token_is(TokenType::StringLiteral) {
        node = AST::new(ASTType::StringLiteral, .token().span)
        let tok = .consume(TokenType::StringLiteral)
        node.u.string_literal = tok.text

    } else if .token_is(TokenType::FormatStringLiteral) {
        node = .parse_format_string()

    } else if .token_is(TokenType::CharLiteral) {
        node = AST::new(ASTType::CharLiteral, .token().span)
        let tok = .consume(TokenType::CharLiteral)
        node.u.char_literal = tok.text

    } else if .token_is(TokenType::True) or .token_is(TokenType::False) {
        let tok = .consume(.token().type)
        node = AST::new(ASTType::BoolLiteral, tok.span)
        node.u.bool_literal = (tok.type == TokenType::True)

    } else if .token_is(TokenType::Dot) {
        let op = .consume(TokenType::Dot)
        let rhs = .consume(TokenType::Identifier)

        let lhs = AST::new(ASTType::Identifier, op.span)
        lhs.u.ident.name = "this"
        lhs.u.ident.is_function = false

        node = AST::new(ASTType::Member, lhs.span.join(rhs.span))
        node.u.member.lhs = lhs
        node.u.member.name = rhs.text

    } else if .token_is(TokenType::Minus) {
        let op = .consume(TokenType::Minus)
        let expr = .parse_factor(in_parens)
        node = AST::new_unop(ASTType::UnaryMinus, op.span.join(expr.span), expr)

    } else if .token_is(TokenType::Not) {
        let op = .consume(TokenType::Not)
        let expr = .parse_factor(in_parens)
        node = AST::new_unop(ASTType::Not, op.span.join(expr.span), expr)

    } else if .token_is(TokenType::Ampersand) {
        let op = .consume(TokenType::Ampersand)
        let expr = .parse_factor(in_parens)
        node = AST::new_unop(ASTType::Address, op.span.join(expr.span), expr)

    } else if .token_is(TokenType::Star) {
        let op = .consume(TokenType::Star)
        let expr = .parse_factor(in_parens)
        node = AST::new_unop(ASTType::Dereference, op.span.join(expr.span), expr)

    } else if .token_is(TokenType::Identifier) {
        let op = .consume(TokenType::Identifier)
        node = AST::new(ASTType::Identifier, op.span)
        node.u.ident.name = op.text

    } else if .token_is(TokenType::OpenParen) {
        let open = .consume(TokenType::OpenParen)
        node = .parse_expression(true)
        let close = .consume(TokenType::CloseParen)
        node.span = open.span.join(close.span)

    } else if .token_is(TokenType::SizeOf) {
        let start = .consume(TokenType::SizeOf)
        .consume(TokenType::OpenParen)
        let type = .parse_type()
        let close = .consume(TokenType::CloseParen)
        node = AST::new(ASTType::SizeOf, start.span.join(close.span))
        node.u.size_of_type = type

    } else {
        .unhandled_type("parse_expression")
    }

    let running = true
    while running {
        if not in_parens and .token().seen_newline {
            running = false
        } else if .token_is(TokenType::OpenParen) {
            let paren_span = .consume(TokenType::OpenParen).span
            let args = Vector::new()
            while not .token_is(TokenType::CloseParen) {
                let expr = .parse_expression(false)
                args.push(expr as untyped_ptr)
                if not .token_is(TokenType::CloseParen) {
                    .consume(TokenType::Comma)
                }
            }
            .consume(TokenType::CloseParen)
            let call_type = ASTType::Call
            let call = AST::new(call_type, paren_span)
            call.u.call.callee = node
            call.u.call.args = args
            call.u.call.added_method_arg = false
            node = call
        } else if .token_is(TokenType::OpenSquare) {
            .consume(TokenType::OpenSquare)
            let index = .parse_expression(true)
            .consume(TokenType::CloseSquare)
            node = AST::new_binop(ASTType::Index, node, index)

        } else if .token_is(TokenType::Dot) {
            .consume(TokenType::Dot)
            let name = .consume(TokenType::Identifier)
            let member = AST::new(ASTType::Member, node.span.join(name.span))
            member.u.member.lhs = node
            member.u.member.name = name.text
            node = member

        } else if .token_is(TokenType::ColonColon) {
            .consume(TokenType::ColonColon)
            let name = .consume(TokenType::Identifier)
            let member = AST::new(ASTType::ScopeLookup, node.span.join(name.span))
            member.u.member.lhs = node
            member.u.member.name = name.text
            node = member

        } else if .token_is(TokenType::As) {
            .consume(TokenType::As)
            let type = .parse_type()
            let cast = AST::new(ASTType::Cast, node.span.join(type.span))
            cast.u.cast.lhs = node
            cast.u.cast.to = type
            node = cast

        } else {
            running = false
        }
    }

    return node
}

def Parser::parse_term(&this, in_parens: bool): &AST {
    let lhs = .parse_factor(in_parens)
    let running = true
    while running and .token_is(TokenType::Star) or .token_is(TokenType::Slash) or .token_is(TokenType::Percent) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_factor(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_additive(&this, in_parens: bool): &AST {
    let lhs = .parse_term(in_parens)
    let running = true
    while running and .token_is(TokenType::Plus) or .token_is(TokenType::Minus) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_term(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_bw_and(&this, in_parens: bool): &AST {
    let lhs = .parse_additive(in_parens)
    let running = true
    while running and .token_is(TokenType::Ampersand) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_additive(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_bw_xor(&this, in_parens: bool): &AST {
    let lhs = .parse_bw_and(in_parens)
    let running = true
    while running and .token_is(TokenType::Caret) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_bw_and(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_bw_or(&this, in_parens: bool): &AST {
    let lhs = .parse_bw_xor(in_parens)
    let running = true
    while running and .token_is(TokenType::Line) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_bw_xor(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_relational(&this, in_parens: bool): &AST {
    let lhs = .parse_bw_or(in_parens)
    let running = true
    while running and .token_is(TokenType::LessThan) or .token_is(TokenType::GreaterThan) or
            .token_is(TokenType::LessThanEquals) or
            .token_is(TokenType::GreaterThanEquals) or
            .token_is(TokenType::EqualEquals) or .token_is(TokenType::NotEquals) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_bw_or(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_logical_and(&this, in_parens: bool): &AST {
    let lhs = .parse_relational(in_parens)
    let running = true
    while running and .token_is(TokenType::And) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_relational(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_logical_or(&this, in_parens: bool): &AST {
    let lhs = .parse_logical_and(in_parens)
    let running = true
    while running and .token_is(TokenType::Or) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_logical_and(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }
    return lhs;
}

def Parser::parse_expression(&this, in_parens: bool): &AST {
    let lhs = .parse_logical_or(in_parens)
    let running = true

    while running and .token_is(TokenType::Equals) or .token_is(TokenType::PlusEquals) or
            .token_is(TokenType::MinusEquals) or .token_is(TokenType::StarEquals) or
            .token_is(TokenType::SlashEquals) {
        if (not in_parens and .token().seen_newline) { 
            running = false; 
        } else {
            let op = ASTType::from_token(.token().type)
            .curr += 1
            let rhs = .parse_expression(in_parens)
            lhs = AST::new_binop(op, lhs, rhs)
        }
    }

    return lhs;
}


def Parser::parse_statement(&this): &AST {
    let node = 0 as &AST
    let start_span = .token().span

    if .token_is(TokenType::Return) {
        .consume(TokenType::Return)
        let expr = .parse_expression(false)
        node = AST::new_unop(ASTType::Return, start_span.join(expr.span), expr)
        .consume_newline_or(TokenType::Semicolon)

    } else if .token_is(TokenType::Defer) {
        .consume(TokenType::Defer)
        let expr = .parse_statement()
        node = AST::new_unop(ASTType::Defer, start_span.join(expr.span), expr)


    } else if .token_is(TokenType::If) {
        .consume(TokenType::If)
        let cond = .parse_expression(false)
        let then = .parse_statement()

        let end_span = then.span
        let els = 0 as &AST
        if .consume_if(TokenType::Else) {
            els = .parse_statement()
            end_span = els.span
        }
        node = AST::new(ASTType::If, start_span.join(end_span))
        node.u.if_stmt.cond = cond
        node.u.if_stmt.then = then
        node.u.if_stmt.els = els

    } else if .token_is(TokenType::While) {
        .consume(TokenType::While)
        let cond = .parse_expression(false)
        let body = .parse_statement()
        node = AST::new(ASTType::While, start_span.join(body.span))
        node.u.loop.cond = cond
        node.u.loop.body = body

    } else if .token_is(TokenType::For) {
        node = AST::new(ASTType::For, .token().span);
        .consume(TokenType::For);

        if not .token_is(TokenType::Semicolon) {
            let init = .parse_statement();
            // FIXME: This doesn't seem very robust...
            if init.type != ASTType::Assignment and
                init.type != ASTType::VarDeclaration {
                error_span(init.span, "Invalid for loop initializer");
            }
            node.u.loop.init = init;

            // This is a hack
            let prev = .tokens.at(.curr - 1) as &Token
            if prev.type == TokenType::Semicolon { .curr -= 1; }
        }
        .consume(TokenType::Semicolon);
        if not .token_is(TokenType::Semicolon)
            node.u.loop.cond = .parse_expression(true)
        .consume(TokenType::Semicolon);

        // FIXME: Should we always require a curly?
        if not .token_is(TokenType::CloseCurly)
            node.u.loop.incr = .parse_expression(false);

        node.u.loop.body = .parse_statement();
        node.span = node.span.join(node.u.loop.body.span);

    } else if .token_is(TokenType::Let) {
        .consume(TokenType::Let)
        let name = .consume(TokenType::Identifier)
        let end_span = name.span

        let type = 0 as &Type
        if .consume_if(TokenType::Colon) {
            type = .parse_type()
            end_span = type.span
        }
        let init = 0 as &AST
        if .consume_if(TokenType::Equals) {
            init = .parse_expression(false)
            end_span = init.span
        }
        .consume_newline_or(TokenType::Semicolon);

        node = AST::new(ASTType::VarDeclaration, start_span.join(end_span))
        node.u.var_decl.var = Variable::new(name.text, type, name.span)
        node.u.var_decl.init = init

    } else if .token_is(TokenType::OpenCurly) {
        node = .parse_block()

    } else {
        node = .parse_expression(false)
        .consume_newline_or(TokenType::Semicolon)
    }

    return node
}

def Parser::parse_block(&this): &AST {
    let node = AST::new(ASTType::Block, .token().span)
    .consume(TokenType::OpenCurly)

    let statements = Vector::new()
    while not .token_is(TokenType::CloseCurly) {
        let statement = .parse_statement()
        statements.push(statement as untyped_ptr)
    }
    node.u.block.statements = statements

    .consume(TokenType::CloseCurly)
    return node;
}

def Parser::parse_function(&this): &Function {
    .consume(TokenType::Def)

    let struct_name = 0 as string
    let is_method = false
    let is_static = false
    let name = .consume(TokenType::Identifier)
    if .consume_if(TokenType::ColonColon) {
        is_method = true
        struct_name = name.text
        name = .consume(TokenType::Identifier)
    }

    let func = Function::new(name.span)
    func.name = name.text
    func.is_method = is_method
    func.method_struct_name = struct_name

    .consume(TokenType::OpenParen)
    while not .token_is(TokenType::CloseParen) {
        let found_amp = .consume_if(TokenType::Ampersand)
        let var_name = .consume(TokenType::Identifier)
        let type = 0 as &Type
        if func.params.empty() and is_method {
            if streq(var_name.text, "this") {
                type = Type::new(BaseType::Structure, name.span)
                type.name = struct_name
                if found_amp {
                    type = Type::new_link(BaseType::Pointer, type, name.span)
                }
            } else if found_amp {
                error_span(var_name.span, "Expected 'this' over here");
            } else {
                is_static = true
            }
        }
        if type == 0 as &Type {
            .consume(TokenType::Colon)
            type = .parse_type()
        }
        let var = Variable::new(var_name.text, type, var_name.span)
        func.params.push(var as untyped_ptr)

        if not .token_is(TokenType::CloseParen) {
            .consume(TokenType::Comma)
        }
    }
    .consume(TokenType::CloseParen)
    if is_method and func.params.size == 0 {
        is_static = true;
    }
    func.is_static = is_static

    if .consume_if(TokenType::Colon) {
        func.return_type = .parse_type()
    } else if streq(name.text, "main") {
        func.return_type = Type::new(BaseType::I32, name.span)
    } else {
        func.return_type = Type::new(BaseType::Void, name.span)
    }

    if (.consume_if(TokenType::Extern)) {
        func.is_extern = true
        func.extern_name = func.name
        if .consume_if(TokenType::OpenParen) {
            let name = .consume(TokenType::StringLiteral)
            func.extern_name = name.text
            .consume(TokenType::CloseParen)
        }
    } else {
        func.is_extern = false
        func.body = .parse_block()
    }

    return func
}

def Parser::parse_enum(&this): &Structure {
    let start_span = .consume(TokenType::Enum).span
    let name = .consume(TokenType::Identifier)

    let enum_def = Structure::new(start_span.join(name.span))
    enum_def.name = name.text
    enum_def.is_enum = true

    let type = Type::new(BaseType::Structure, name.span)
    enum_def.type = type
    type.name = name.text
    type.struct_def = enum_def

    .consume(TokenType::OpenCurly)
    while not .token_is(TokenType::CloseCurly) {
        let name = .consume(TokenType::Identifier)
        let type = Type::new(BaseType::I32, name.span)

        let var = Variable::new(name.text, type, name.span)
        enum_def.fields.push(var as untyped_ptr)
        if not .token_is(TokenType::CloseCurly) {
            .consume_newline_or(TokenType::Comma)
        }
    }
    .consume(TokenType::CloseCurly)

    return enum_def
}

def Parser::parse_struct(&this): &Structure {
    let is_union = false
    let start_span = .token().span
    if .consume_if(TokenType::Union) {
        is_union = true
    } else {
        .consume(TokenType::Struct)
    }

    let name = .consume(TokenType::Identifier)

    let struc = Structure::new(start_span.join(name.span))
    struc.name = name.text

    if .consume_if(TokenType::Extern) {
        struc.is_extern = true
        struc.extern_name = struc.name
        if .consume_if(TokenType::OpenParen) {
            let name = .consume(TokenType::StringLiteral)
            struc.extern_name = name.text
            .consume(TokenType::CloseParen)
        }
    }

    // Extern structs don't need to have a body.
    if not struc.is_extern or .token_is(TokenType::OpenCurly) {
        .consume(TokenType::OpenCurly)
        while not .token_is(TokenType::CloseCurly) {
            let name = .consume(TokenType::Identifier)
            .consume(TokenType::Colon)
            let type = .parse_type()

            let var = Variable::new(name.text, type, name.span.join(type.span))
            struc.fields.push(var as untyped_ptr)
            if not .token_is(TokenType::CloseCurly) {
                .consume_newline_or(TokenType::Comma)
            }
        }
        .consume(TokenType::CloseCurly)
    }

    let type = Type::new(BaseType::Structure, name.span)
    type.name = name.text
    struc.type     = type
    type.struct_def  = struc
    struc.is_union = is_union

    return struc
}

def Parser::parse_global_var(&this): &AST {
    let start_span = .consume(TokenType::Let).span

    let node = AST::new(ASTType::VarDeclaration, .token().span)
    let name = .consume(TokenType::Identifier)

    let type = 0 as &Type
    if .consume_if(TokenType::Colon) { type = .parse_type(); }

    let var = Variable::new(name.text, type, start_span.join(.token().span))
    node.u.var_decl.var = var

    if .consume_if(TokenType::Extern) {
        var.is_extern = true;
        if .consume_if(TokenType::OpenParen) {
            let name = .consume(TokenType::StringLiteral)
            var.extern_name = name.text
            .consume(TokenType::CloseParen)
        } else {
            var.extern_name = var.name
        }

        if type == 0 as &Type {
            error_span(name.span, "Extern variables must have a type");
        }
    } else {
        var.is_extern = false;
        if .consume_if(TokenType::Equals) {
            node.u.var_decl.init = .parse_expression(false);
        }
    }
    .consume_newline_or(TokenType::Semicolon);
    return node;
}

def Parser::include_file(&this, program: &Program, filename: string) {
    if not program.is_file_included(filename) {
        program.add_included_file(filename)

        let file = File::open(filename, "r")
        let contents = file.slurp()

        let lexer = Lexer::make(contents, filename)
        let tokens = lexer.lex()

        let parser = Parser::make(tokens)
        parser.parse_into_program(program)
    }
}

def Parser::parse_use(&this, program: &Program) {
    .consume(TokenType::Use)
    let name = .consume(TokenType::StringLiteral)
    .consume_newline_or(TokenType::Semicolon)
    .include_file(program, name.text)
}


def Parser::parse_compiler_option(&this, program: &Program) {
    .consume(TokenType::AtSign)
    let compiler = .consume(TokenType::Identifier)
    if not streq(compiler.text, "compiler") {
        error_span(compiler.span, "Expected 'compiler'")
    }

    let name = .consume(TokenType::Identifier)

    if streq(name.text, "c_include") {
        let filename = .consume(TokenType::StringLiteral)
        program.c_includes.push(filename.text as untyped_ptr)

    } else if streq(name.text, "c_flag") {
        let flag = .consume(TokenType::StringLiteral)
        program.c_flags.push(flag.text as untyped_ptr)

    } else {
        error_span(name.span, "Unknown compiler option")
    }

}

def Parser::parse_into_program(&this, program: &Program) {
    while not .token_is(TokenType::EOF) {
        if .token_is(TokenType::Def) {
            let func = .parse_function()
            program.functions.push(func as untyped_ptr)

        } else if .token_is(TokenType::Use) {
            .parse_use(program)

        } else if .token_is(TokenType::Let) {
            let node = .parse_global_var()
            program.global_vars.push(node as untyped_ptr)

        } else if .token_is(TokenType::Struct) or .token_is(TokenType::Union) {
            let structure = .parse_struct()
            program.structures.push(structure as untyped_ptr)

        } else if .token_is(TokenType::Enum) {
            let structure = .parse_enum()
            program.structures.push(structure as untyped_ptr)

        } else if .token_is(TokenType::AtSign) {
            .parse_compiler_option(program)

        } else {
            .unhandled_type("parse_program")
        }
    }
}

def Parser::parse_program(&this): &Program {
    let program = Program::new()
    .include_file(program, "./lib/prelude.ae")
    program.add_included_file(.token().span.start.filename)
    .parse_into_program(program)
    return program
}
